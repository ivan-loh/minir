#!/usr/bin/env node

var program = require('commander');

    program.version('0.1.0')
           .option('-d, --dir      [value]', 'Directory to serve')
           .option('-p, --port     [value]', 'Port to server on')
           .option('-i, --interval [value]', 'Directory watch interval in ms, defaults to 500')
           .option('-m, --maxAge   [value]', 'cache maxAge in ms defaults to 500')
           .parse(process.argv);



function Minir(opts) {

  function inject() {
    var snippets = [
      "<script src=\"/socket.io/socket.io.js\"></script>",
      "<script>io.connect(window.location.origin).on('reload', function (data) { window.location.reload(); });</script>",
    ];
    return require('connect-inject')({snippet:snippets});
  }

  var connect = require('connect');
  var app     = connect().use(connect.directory(opts.path))
                         .use(inject())
                         .use(connect.static(opts.path, { maxAge : opts.maxAge }));

  var server  = require('http').createServer(app);
  var io      = require('socket.io').listen(server, { log: false });
      io.enable('browser client minification');
      io.enable('browser client etag');
      io.enable('browser client gzip');
      io.set('log level', 1);

  var w       = false;

  function watch(path, callback) {
    require('watch')
      .watchTree(path, { persistent: true, interval: opts.interval }, function (f, curr, prev) {
        if (typeof f == "object" && prev === null && curr === null) {
        } else if (prev === null) {
        } else if (curr !== null && curr.nlink === 0) {
        } else {
          callback();
        }
      });
    return true;
  }

  io.sockets.on('connection', function () {
    if (w) return;
    w = watch(opts.path, function () {
      io.sockets.emit('reload');
    }); 
  });

  server.listen(opts.port, function () {
    console.log('Minir started');
    console.log('port:     ' + opts.port);
    console.log('path:     ' + opts.path);
    console.log('interval: ' + opts.interval);
    console.log('maxAge:   ' + opts.maxAge);
  });
}



var options = {
  path:     require('fs').realpathSync(program.dir || '.'),
  port:     program.port || 3000,
  interval: program.interval || 500,
  maxAge:   program.maxAge || 500
};

new Minir(options);
